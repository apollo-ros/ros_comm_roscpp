// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MetaMessage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "discovery/MetaMessage.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

MetaMessage::MetaMessage()
{
    m_message_id = 0;

}

MetaMessage::~MetaMessage()
{
}

MetaMessage::MetaMessage(const MetaMessage &x)
{
    m_message_id = x.m_message_id;
    m_data = x.m_data;
}

MetaMessage::MetaMessage(MetaMessage &&x)
{
    m_message_id = x.m_message_id;
    m_data = std::move(x.m_data);
}

MetaMessage& MetaMessage::operator=(const MetaMessage &x)
{
    m_message_id = x.m_message_id;
    m_data = x.m_data;

    return *this;
}

MetaMessage& MetaMessage::operator=(MetaMessage &&x)
{
    m_message_id = x.m_message_id;
    m_data = std::move(x.m_data);

    return *this;
}

size_t MetaMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 8192 + 1;


    return current_alignment - initial_alignment;
}

size_t MetaMessage::getCdrSerializedSize(const MetaMessage& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.data().size() + 1;


    return current_alignment - initial_alignment;
}

void MetaMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_message_id;

    if(m_data.length() <= 8192)
    scdr << m_data;
    else
        throw eprosima::fastcdr::exception::BadParamException("data field exceeds the maximum length");
}

void MetaMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_message_id;
    dcdr >> m_data;
}

size_t MetaMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;




    return current_align;
}

bool MetaMessage::isKeyDefined()
{
    return false;
}

void MetaMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void)scdr;
}
